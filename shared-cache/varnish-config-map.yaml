apiVersion: v1
kind: ConfigMap
metadata:
  name: vcl-template
  namespace: varnish-cache
data:
  default.vcl.tmpl: |
    vcl 4.0;

    import std;
    import directors;

    // ".Frontends" is a slice that contains all known Varnish instances
    // (as selected by the service specified by -frontend-service).
    // The backend name needs to be the Pod name, since this value is compared
    // to the server identity ("server.identity" [1]) later.
    //
    //   [1]: https://varnish-cache.org/docs/6.4/reference/vcl.html#local-server-remote-and-client
    {{ range .Frontends }}
    backend {{ .Name }} {
        .host = "{{ .Host }}";
        .port = "{{ .Port }}";
    }
    {{- end }}

    backend nginx {
        .host = "nginx";
        .port = "80";
    }

    acl purgers {
        "127.0.0.1";
        "localhost";
        "::1";
        {{- range .Frontends }}
        "{{ .Host }}";
        {{- end }}
        {{- range .Backends }}
        "{{ .Host }}";
        {{- end }}
    }

    sub vcl_init {
        new cluster = directors.shard();
        {{ range .Frontends -}}
        cluster.add_backend({{ .Name }});
        {{ end }}
        cluster.set_warmup(180);
        cluster.reconfigure();
        new lb = directors.round_robin();
        # {{ range .Backends -}}
        # lb.add_backend({{ .Name }});
        # {{ end }}
        lb.add_backend(nginx);
    }

    sub vcl_recv {
        # Purge logic
        if (req.method == "PURGE") {
            if (client.ip !~ purgers) {
            return (synth(403, "Not allowed."));
            }
            if (req.http.X-Host) {
            set req.http.host = req.http.X-Host;
            }
            return (purge);
        }

        # Ban logic
        if (req.method == "BAN") {
            if (client.ip !~ purgers) {
            return (synth(403, "Not allowed."));
            }
            if (req.http.Cache-Tags) {
            ban("obj.http.Cache-Tags ~ " + req.http.Cache-Tags);
            return (synth(200, "Ban added " + req.http.host));
            }
            if (req.http.X-Url) {
            ban("obj.http.X-Url == " + req.http.X-Url);
            return (synth(200, "Ban added " + req.http.host));
            }
            return (synth(403, "Cache-Tags or X-Url header missing."));
        }

        # Set backend hint for non cachable objects.
        set req.backend_hint = lb.backend();
        std.log("req.backend_hint:" + req.backend_hint);
        # ...
        unset req.http.x-cache;
        set req.backend_hint = cluster.backend(by=URL);
        std.log("req.backend_hint:" + req.backend_hint);
        set req.http.x-shard = req.backend_hint;
        if (req.http.x-shard != server.identity) {
            return(pass);
        }
        set req.backend_hint = lb.backend();
        # ...
        return(hash);
    }

    sub vcl_deliver {
        if (obj.hits > 0) {
            set resp.http.X-Cache = "HIT from Varnish cache" ;
        } else {
            set resp.http.X-Cache = "MISS";
        }
    }

    sub vcl_backend_response {
        set beresp.ttl = 60s;
    }